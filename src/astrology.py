 # Astrology information and instrumentation
from kerykeion import AstrologicalSubject
from datetime import datetime

import random

# Define Holst's planets instrumentation and sound descriptions
# Definition generated by ChatGPT (checked by me)
planets_instruments = {
    'Mars': {
        'instruments': ['trombone', 'trumpet'],
        'sound': 'Aggressive, martial rhythms and powerful brass fanfares'
    },
    'Venus': {
        'instruments': ['french horn'],
        'sound': 'Warm, mellow tones symbolizing serenity and tranquility'
    },
    'Mercury': {
        'instruments': ['flute', 'clarinet'],
        'sound': 'Light and nimble melodies evoking swift movements'
    },
    'Jupiter': {
        'instruments': ['french horn', 'violin'],
        'sound': 'Majestic brass fanfares and lush string melodies'
    },
    'Saturn': {
        'instruments': ['organ'],
        'sound': 'Deep, resonant tones adding a sense of gravity and solemnity'
    },
    'Uranus': {
        'instruments': ['timpani', 'brass'],
        'sound': 'Bold rhythms and unconventional brass and percussion usage'
    },
    'Neptune': {
        'instruments': ['celesta', 'harp'],
        'sound': 'Ethereal, shimmering tones creating an otherworldly atmosphere'
    }
}

holst_planets = list(planets_instruments.keys())

# Helper function to get today's planets, based on an Astrological sign
# Note: We default the Astrological sign to Aries, since this idea was conceived in April
# Alternatively, the sign could be set to the audience's sign, but our AI system wants its own sign too

def get_planets(filtered_sign='Ari', valid_planets=holst_planets):
  """
  Returns list of planets that are in the filtered_sign today.

  """
  today = datetime.now()

  # Create object for astrological subject
  astro_subj = AstrologicalSubject("GenAI", today.year, today.month, today.day, today.hour, today.minute, "London", "GB")

  today_planets = []
  for planet_name in astro_subj.planets_names_list:
    planet_sign = getattr(astro_subj, planet_name.lower()).sign
    if (planet_sign == filtered_sign) & (planet_name in valid_planets):
      today_planets.append(planet_name)

  if len(today_planets) == 0:
    # If no planets are in filtered_sign today, pick a random planet
    today_planets.append(random.choice(holst_planets))

  return today_planets
